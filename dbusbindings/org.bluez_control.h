/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p org.bluez_control.h:org.bluez_control.cpp org.bluez.control.xml org.bluez.Control
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_BLUEZ_CONTROL_H_1369666489
#define ORG_BLUEZ_CONTROL_H_1369666489

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.bluez.Control
 */
class OrgBluezControlInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.bluez.Control"; }

public:
    OrgBluezControlInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgBluezControlInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> IsConnected()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsConnected"), argumentList);
    }

    inline QDBusPendingReply<> Next()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Next"), argumentList);
    }

    inline QDBusPendingReply<> PlayPause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("PlayPause"), argumentList);
    }

    inline QDBusPendingReply<> Prev()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Prev"), argumentList);
    }

    inline QDBusPendingReply<> VolumeDown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("VolumeDown"), argumentList);
    }

    inline QDBusPendingReply<> VolumeUp()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("VolumeUp"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Connected();
    void DisConnected();
    void PropertyChanged(const QString &in0, const QDBusVariant &in1);
};

namespace org {
  namespace bluez {
    typedef ::OrgBluezControlInterface Control;
  }
}
#endif
